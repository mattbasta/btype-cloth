import date;
import math;


int:mouseButton = 0;
int:canvasWidth = 0;
float:mouseCut = 6.0;
float:mouseInfluenceSize = 30.0;
float:tearSensitivity = 65.0;
float:gravity = 0.0;
bool:windEnabled = false;
float:startTime = 0.0;


#@ TODO: Replace these with a type alias of `tuple<float, float>`
object Vec2d {
    float:x;
    float:y;

    new(float:x, float:y) {
        self.x = x;
        self.y = y;
    }
}


Vec2d:mouse = new Vec2d(0.0, 0.0);
Vec2d:prevMouse = new Vec2d(0.0, 0.0);


object Point {
    Vec2d:pos;
    Vec2d:lastPos;
    float:mass;
    Vec2d:acc;
    bool:pinned;
    bool:free;
    bool:markRemove;

    new(float:x, float:y, float:mass, bool:pinned) {
        self.pos = new Vec2d(x, y);
        self.acc = new Vec2d(0.0, 0.0);

        self.lastPos = self.pos;
        self.mass = mass;
        self.pinned = pinned;
    }

    update(float:dt) {
        float:dtSeq = dt * dt;

        float:x = self.pos.x;
        float:y = self.pos.y;

        if (self.pinned) {
            return;
        }

        if (mouseButton != 0) {
            float:dist = math.hypot(x - mouse.x, y - mouse.y);
            if (mouseButton == 1) {
                if (dist < mouseInfluenceSize) {
                    self.lastPos.x = x - math.bound((mouse.x - prevMouse.x) * 1.8, -30.0, 30.0);
                    self.lastPos.y = y - math.bound((mouse.y - prevMouse.y) * 1.8, -30.0, 30.0);
                }
            } else if (dist < mouseCut) {
                self.markRemove = true;
            }
        }

        if(!(self.free)) {
            self.applyForce(0.0, self.mass * gravity);
        }
        float:lx = self.lastPos.x;
        float:ly = self.lastPos.y;

        self.lastPos.x = x;
        self.lastPos.y = y;
        var velX = (x - lx) * 1.5;
        var velY = (y - ly) * 1.5;
        self.pos.x = x + velX + self.acc.x * dtSeq;
        self.pos.y = y + velY + self.acc.y * dtSeq;

        self.acc.x = 0.0;
        self.acc.y = 0.0;
    }

    applyForce(float:x, float:y) {
        var acc = self.acc;
        acc.x = acc.x + x / self.mass;
        acc.y = acc.y + y / self.mass;
    }

}

object Link {
    Point:p1;
    Point:p2;
    float:distRest;
    float:tearness;

    new(Point:p1, Point:p2, float:distRest, float:tearness) {
        self.p1 = p1;
        self.p2 = p2;
        self.distRest = distRest;
        self.tearness = tearness;
    }

    markRemove() {
        self.p1.markRemove = true;
        self.p2.markRemove = true;
    }

    solve() {
        Point:p1 = self.p1;
        Point:p2 = self.p2;

        float:diffX = p1.pos.x - p2.pos.x;
        float:diffY = p1.pos.y - p2.pos.y;
        float:d = math.hypot(diffX, diffY);

        if (d > self.tearness) {
            self.markRemove();
        }

        float:scalar = (self.distRest - d) / d;

        if(!(p1.pinned)) {
            p1.pos.x = p1.pos.x + diffX * scalar * 0.5;
            p1.pos.y = p1.pos.y + diffY * scalar * 0.5;
        }

        if(!(p2.pinned)) {
            p2.pos.x = p2.pos.x - diffX * scalar * 0.5;
            p2.pos.y = p2.pos.y - diffY * scalar * 0.5;
        }
    }
}

int:clothW = 0;
int:clothH = 0;
int:numPoints = 0;
array<Point>:points = new array<Point>(500000);

int:numLinks = 0;
array<Link>:links = new array<Link>(500000);


func update() {
    var dt = 16.0 / 1000.0;

    var z = 0;
    var i = 0;
    for (z = 0; z < 5; z = z + 1;) {
        for (i = 0; i < numLinks; i = i + 1;) {
            if (links[i].p1.markRemove or links[i].p2.markRemove) continue;
            links[i].solve();
        }
    }

    for (i = 0; i < numPoints; i = i + 1;) {
        points[i].update(dt);
    }

    # if (windEnabled) {
    #     var totalTime = date.sinceinit() - startTime;
    #     for (i = 0; i < numPoints; i = i + 1;) {
    #         points[i].applyForce(
    #             ((math.cos(points[i].pos.x / 30.0) + 1.0) * 200.0 +
    #              points[i].pos.y / 700.0 * 600.0) * (math.sin(totalTime) * 0.5 + 1.0),
    #             0.0
    #         );
    #     }
    # }
}
export update;

# This is placed out here to minimize malloc calls
array<sfloat>:verts = new array<sfloat>(2000000);
func array<sfloat>:renderLines() {
    int:idx = 1;

    var i = 0;
    for (i = 0; i < numLinks; i = i + 1;) {
        if (links[i].p1.markRemove or links[i].p2.markRemove) continue;

        verts[idx] = links[i].p1.pos.x as sfloat;
        idx = idx + 1;
        verts[idx] = links[i].p1.pos.y as sfloat;
        idx = idx + 1;
        verts[idx] = links[i].p2.pos.x as sfloat;
        idx = idx + 1;
        verts[idx] = links[i].p2.pos.y as sfloat;
        idx = idx + 1;
    }

    verts[0] = (idx as sfloat) - 1.0s;
    return verts;
}
export renderLines;


# Init

func constructMesh(int:level) {
    clothW = level + 8;
    clothH = level / 2;

    int:linkPtr = 0;
    int:pointPtr = 0;

    float:restingDistance = 700.0 / ((clothW - 1) as float);

    int:startX = canvasWidth / 2 - (clothW * (restingDistance as int)) / 2;
    int:startY = 0;

    int:x = 0;
    int:y = 0;
    int:index = 0;
    Point:p = null;
    float:tearness = 0.0;
    for(y = 0; y < clothH; y = y + 1;) {
        for(x = 0; x < clothW; x = x + 1;) {
            p = new Point(
                (startX as float) + (x as float) * restingDistance,
                (startY as float) + (y as float) * restingDistance,
                1.0,
                y == 0
            );
            index = y * clothW + x;
            points[index] = p;

            tearness = tearSensitivity;

            if (clothH > 70) {
                if (y % 2 != 0 and x % 2 != 0) {
                    points[index].free = true;
                }

                if (y < 10) {
                    tearness = 80.0;
                }
            }

            if (x > 0) {
                links[linkPtr] = new Link(points[index - 1], points[index], restingDistance, tearness);
                linkPtr = linkPtr + 1;
            }

            if (y > 0) {
                links[linkPtr] = new Link(points[(y - 1) * clothW + x], points[index], restingDistance, tearness);
                linkPtr = linkPtr + 1;
            }
        }
    }

    numLinks = linkPtr;
    numPoints = clothW * clothH;
}
export constructMesh;

func int:getClothW() {
    return clothW;
}
export getClothW;

func int:getClothH() {
    return clothH;
}
export getClothH;

func setGravity(float:value) {
    gravity = value;
}
export setGravity;

func setWind(bool:flag) {
    windEnabled = flag;
}
export setWind;

func setMouse(float:x, float:y) {
    mouse.x = x;
    mouse.y = y;
}
export setMouse;

func setMouseButton(int:button) {
    mouseButton = button;
}
export setMouseButton;

func int:getMouseButton() {
    return mouseButton;
}
export getMouseButton;

func mouseMove(float:x, float:y, int:button) {
    prevMouse.x = mouse.x;
    prevMouse.y = mouse.y;
    mouse.x = x;
    mouse.y = y;
}
export mouseMove;

func main(int:width) {
    canvasWidth = width;
    startTime = date.sinceinit();
}
export main;
